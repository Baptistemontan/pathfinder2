{"version":3,"sources":["components/dropDownList.tsx","NodeClass.ts","common.ts","pathfindingAlgo.ts","BoardClass.ts","components/node.tsx","components/grid.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DropDownList","choices","defaultChoice","handleChange","id","question","useState","currentChoice","setCurrentChoice","active","setActive","handleListClick","optionsContainerClass","className","onClick","map","choice","index","selected","type","name","htmlFor","NodeClass","pos","_pos","_state","stateHandler","_weight","this","state","undefined","nodeInfo","weight","handler","defaultStart","x","Math","floor","ROW_NUMBER","y","defaultGoal","COL_NUMBER","AlgosChoices","defaultAlgo","SpeedChoices","AnimDelay","Slow","Medium","Instant","defaultSpeed","ManhattanDist","a","b","abs","addCoord","isValidCoord","coordToString","isEqualCoord","ArrayFromVertexSet","vertexSet","start","goal","Array","from","filter","filterStartGoal","vectors","getNeighbours","node","nodes","coef","v","createVertex","parent","dist","heuristic","visited","sortFn","Astar","heuristicFn","visitedNodes","Set","startInfo","queue","nodesRecord","sort","currentNode","shift","path","cNode","unshift","successor","getValidNeighbours","posIndex","add","forEach","includes","push","length","generateMaze","nodesInfos","current","toAnimate","neighbours","random","n","test","has","mazeHolePresence","midCoord","BoardClass","nbRow","nbCol","col","board","rightClick","mouseDown","toChange","currentRenderID","_autoRefresh","_currentAlgo","_speed","handleMouseDown","button","clear","handleMouseEnter","fill","_","__","speed","newCurrentAlgo","autoRefresh","row","newId","reset","animation","renderID","console","log","len","animateNodes","launch","startingPoint","changeState","animate","offset","toDo","i","setTimeout","Node","classNames","setClassNames","changeStateHandler","newState","newClassNames","join","useEffect","stateChangeHandler","onMouseDown","e","onMouseEnter","Grid","nodeGrid","onContextMenu","preventDefault","App","Board","window","addEventListener","handleMouseUp","algo","currentAlgo","newChoice","grid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d589f28.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n// eslint-disable-next-line no-use-before-define\r\nimport React, { useState } from \"react\";\r\n\r\ninterface DropDownListProps<T> {\r\n  choices:ReadonlyArray<T>;\r\n  defaultChoice:T;\r\n  id:string;\r\n  question:string;\r\n  handleChange:(newChoice:T) => void;\r\n}\r\n\r\nexport default function DropDownList<T extends string>({\r\n  choices, defaultChoice, handleChange, id, question,\r\n}:DropDownListProps<T>) {\r\n  const [currentChoice, setCurrentChoice] = useState(defaultChoice);\r\n  const [active, setActive] = useState(false);\r\n\r\n  const handleListClick = () => {\r\n    setActive(!active);\r\n  };\r\n\r\n  const handleOptionClick = (selected:T) => {\r\n    setCurrentChoice(selected);\r\n    setActive(false);\r\n    handleChange(selected);\r\n  };\r\n\r\n  const optionsContainerClass = `options-container ${active ? \"active\" : \"\"}`;\r\n  return (\r\n    <div className=\"drop-list noselect\" id={id}>\r\n      <div className=\"list-question button\" onClick={handleListClick}>\r\n        { question }\r\n      </div>\r\n      <div className=\"select-box\">\r\n        <div className=\"list-button button\" onClick={handleListClick}>\r\n          {currentChoice}\r\n        </div>\r\n        <div className={optionsContainerClass}>\r\n          { choices.map((choice, index) => (\r\n            <div\r\n              className=\"option\"\r\n              key={choice}\r\n              onClick={() => handleOptionClick(choice)}\r\n            >\r\n              <input\r\n                type=\"radio\"\r\n                className=\"radio\"\r\n                id={`${id}option${index}`}\r\n                name=\"category\"\r\n              />\r\n              <label htmlFor={`${id}option${index}`}>{choice}</label>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","/* eslint-disable no-underscore-dangle */\r\nimport { Coord, NodeInfo, NodeState } from \"./common\";\r\n\r\ntype nodeStateHandler = (newState:NodeState, weight?:number) => void;\r\n\r\nexport default class NodeClass {\r\n  protected _pos:Coord;\r\n\r\n  protected _state:NodeState;\r\n\r\n  protected stateHandler:nodeStateHandler | undefined;\r\n\r\n  protected _weight:number | undefined;\r\n\r\n  constructor(pos:Coord) {\r\n    this._pos = pos;\r\n    this._state = \"empty\";\r\n  }\r\n\r\n  get state() {\r\n    return this._state;\r\n  }\r\n\r\n  set state(state:NodeState) {\r\n    if (this._state === state) return;\r\n    if (state !== \"empty\" && state !== \"path\" && state !== \"visited\") {\r\n      this._weight = undefined;\r\n    }\r\n    this._state = state;\r\n    if (this.stateHandler) {\r\n      this.stateHandler(state, this._weight);\r\n    }\r\n  }\r\n\r\n  get pos() {\r\n    return this._pos;\r\n  }\r\n\r\n  get nodeInfo() {\r\n    const nodeInfo:NodeInfo = {\r\n      pos: this._pos,\r\n      state: this._state,\r\n    };\r\n    if (this._weight) nodeInfo.weight = this._weight;\r\n    return nodeInfo;\r\n  }\r\n\r\n  set stateChangeHandler(handler:nodeStateHandler) {\r\n    this.stateHandler = handler;\r\n  }\r\n\r\n  get weight() {\r\n    return this._weight;\r\n  }\r\n\r\n  set weight(weight:number | undefined) {\r\n    this._weight = weight;\r\n    if (this.stateHandler) this.stateHandler(this._state, this._weight);\r\n  }\r\n\r\n  clear() {\r\n    if (this._state === \"path\" || this._state === \"visited\") {\r\n      this.state = \"empty\";\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    if (this._state === \"wall\") {\r\n      this.state = \"empty\";\r\n    }\r\n    if (this._weight) {\r\n      this.weight = undefined;\r\n    }\r\n  }\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport NodeClass from \"./NodeClass\";\r\n\r\nexport const ROW_NUMBER = 23; // 23\r\nexport const COL_NUMBER = 51; // 51\r\nexport const defaultWeight = 10;\r\nexport const mazeHolePresence = 5;\r\n\r\nexport interface Coord {\r\n  x:number;\r\n  y:number;\r\n}\r\n\r\nexport const defaultStart:Coord = {\r\n  x: Math.floor(ROW_NUMBER / 2),\r\n  y: Math.floor(COL_NUMBER / 4),\r\n};\r\n\r\nexport const defaultGoal:Coord = {\r\n  x: Math.floor(ROW_NUMBER / 2),\r\n  y: Math.floor((COL_NUMBER / 4) * 3),\r\n};\r\n\r\ntype baseState = \"start\" | \"goal\";\r\nexport type stateToChange = baseState | \"setWeight\" | \"removeWeight\" | \"setWall\" | \"removeWall\" | \"none\";\r\nexport type NodeState = baseState | \"path\" | \"visited\" | \"empty\" | \"wall\";\r\n\r\nexport const AlgosChoices = [\"Astar\", \"Djikstra\"] as const;\r\nexport type AlgosLabels = typeof AlgosChoices[number];\r\nexport const defaultAlgo:AlgosLabels = \"Astar\";\r\nexport const SpeedChoices = [\"Slow\", \"Medium\", \"Fast AF\", \"Instant\"] as const;\r\nexport type speedLabels = typeof SpeedChoices[number];\r\n\r\nexport const AnimDelay:Record<speedLabels, number> = {\r\n  Slow: 30,\r\n  Medium: 10,\r\n  \"Fast AF\": 5,\r\n  Instant: 0,\r\n};\r\nexport const defaultSpeed:speedLabels = \"Fast AF\";\r\n\r\nexport interface NodeInfo {\r\n  pos:Coord;\r\n  state:NodeState;\r\n  weight?:number;\r\n}\r\n\r\nexport function ManhattanDist(a:Coord, b:Coord):number {\r\n  return Math.abs(a.x - b.x) + Math.abs(a.y - b.y);\r\n}\r\n\r\nexport function EucldianDist(a:Coord, b:Coord):number {\r\n  const x = (a.x - b.x) ** 2;\r\n  const y = (a.y - b.y) ** 2;\r\n  return Math.sqrt(x + y);\r\n}\r\n\r\nexport function addCoord(a:Coord, b:Coord):Coord {\r\n  const newCoord:Coord = {\r\n    x: a.x + b.x,\r\n    y: a.y + b.y,\r\n  };\r\n  return newCoord;\r\n}\r\n\r\nexport function isValidCoord(pos:Coord):boolean {\r\n  if (pos.x < 0 || pos.x >= ROW_NUMBER) return false;\r\n  if (pos.y < 0 || pos.y >= COL_NUMBER) return false;\r\n  return true;\r\n}\r\n\r\nexport function coordToString(pos:Coord):string {\r\n  return `${pos.x}-${pos.y}`;\r\n}\r\n\r\nexport function stringToCoord(pos:string):Coord {\r\n  const parsed = pos.split(\"-\").map((n) => parseInt(n, 10));\r\n  return { x: parsed[0], y: parsed[1] };\r\n}\r\n\r\nexport function duplicateGrid(grid:NodeInfo[][]) {\r\n  return grid.map((row) => row.map((node) => node));\r\n}\r\n\r\nexport function isEqualCoord(a:Coord, b:Coord) {\r\n  return a.x === b.x && a.y === b.y;\r\n}\r\n\r\nexport function filterStartGoal(start:Coord, goal:Coord) {\r\n  return (pos:Coord) => !(isEqualCoord(pos, start) || isEqualCoord(pos, goal));\r\n}\r\n\r\nexport function ArrayFromVertexSet(vertexSet:Set<Coord>, start:Coord, goal:Coord) {\r\n  return Array.from(vertexSet).filter(filterStartGoal(start, goal));\r\n}\r\n\r\nexport function createNodeGrid(row:number, col:number) {\r\n  return Array(row)\r\n    .fill(null)\r\n    .map((_, x) => Array(col)\r\n      .fill(null)\r\n      .map((__, y) => new NodeClass({ x, y })));\r\n}\r\n\r\nexport function clearBoard(nodes:NodeClass[][]) {\r\n  nodes.forEach((row) => row.forEach((n) => n.clear()));\r\n}\r\n\r\nexport function removeWallsAndWeights(nodes:NodeClass[][]) {\r\n  nodes.forEach((row) => row.forEach((n) => n.reset()));\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport {\r\n  addCoord,\r\n  ArrayFromVertexSet,\r\n  Coord,\r\n  coordToString,\r\n  isValidCoord,\r\n  mazeHolePresence,\r\n  NodeInfo,\r\n} from \"./common\";\r\nimport NodeClass from \"./NodeClass\";\r\n\r\nconst vectors:Coord[] = [\r\n  { x: 0, y: 1 },\r\n  { x: 0, y: -1 },\r\n  { x: 1, y: 0 },\r\n  { x: -1, y: 0 },\r\n];\r\n\r\nfunction getNeighbours(node:Coord, nodes:NodeInfo[][], coef = 1):Coord[] {\r\n  return vectors.map((v) => ({ x: v.x * coef, y: v.y * coef } as Coord))\r\n    .map((v) => addCoord(node, v))\r\n    .filter((pos) => isValidCoord(pos));\r\n}\r\n\r\nfunction getValidNeighbours(node:Coord, nodes:NodeInfo[][]) {\r\n  return getNeighbours(node, nodes).filter((pos) => nodes[pos.x][pos.y].state !== \"wall\");\r\n}\r\n\r\ntype HeuristicFn = (a:Coord, b:Coord) => number;\r\n\r\ninterface Vertex {\r\n  parent:Vertex | undefined;\r\n  heuristic:number;\r\n  dist:number;\r\n  pos:Coord;\r\n  visited:boolean;\r\n  weight:number;\r\n}\r\n\r\nfunction createVertex(\r\n  pos:Coord,\r\n  parent:Vertex | undefined,\r\n  dist:number,\r\n  weight:number | undefined,\r\n  heuristic?:number,\r\n) {\r\n  const vertex:Vertex = {\r\n    heuristic: heuristic || 0,\r\n    dist,\r\n    parent,\r\n    pos,\r\n    visited: false,\r\n    weight: weight || 1,\r\n  };\r\n  return vertex;\r\n}\r\n\r\nfunction sortFn(a:Vertex, b:Vertex) {\r\n  return a.dist + a.heuristic - b.dist - b.heuristic;\r\n}\r\n\r\nexport function Astar(\r\n  nodes:NodeInfo[][],\r\n  start:Coord,\r\n  goal:Coord,\r\n  heuristicFn?:HeuristicFn,\r\n):[Coord[], Coord[]] {\r\n  const visitedNodes = new Set<Coord>();\r\n  const startInfo = nodes[start.x][start.y];\r\n  const queue:Vertex[] = [createVertex(\r\n    start,\r\n    undefined,\r\n    0,\r\n    startInfo.weight,\r\n  )];\r\n  const nodesRecord:Record<string, Vertex> = {};\r\n  // eslint-disable-next-line prefer-destructuring\r\n  nodesRecord[coordToString(start)] = queue[0];\r\n  while (queue.length) {\r\n    queue.sort(sortFn);\r\n    // queue.length != 0, queue.shift() can't return undefined\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    const currentNode = queue.shift()!;\r\n    if (coordToString(currentNode.pos) === coordToString(goal)) {\r\n      const path:Coord[] = [];\r\n      // start node != goal nodes, therefore currentNode.parent can't be undefined\r\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n      let cNode = currentNode.parent!;\r\n      while (cNode.parent) {\r\n        path.unshift(cNode.pos);\r\n        cNode = cNode.parent;\r\n      }\r\n      return [path, ArrayFromVertexSet(visitedNodes, start, goal)];\r\n    }\r\n    currentNode.visited = true;\r\n    const successor = getValidNeighbours(currentNode.pos, nodes).map((pos) => {\r\n      const posIndex = coordToString(pos);\r\n      let cNode = nodesRecord[posIndex];\r\n      if (!cNode) {\r\n        cNode = createVertex(\r\n          pos,\r\n          currentNode,\r\n          currentNode.dist + (nodes[pos.x][pos.y].weight || 1),\r\n          nodes[pos.x][pos.y].weight,\r\n          heuristicFn && heuristicFn(pos, goal),\r\n        );\r\n        nodesRecord[posIndex] = cNode;\r\n        visitedNodes.add(pos);\r\n      }\r\n      return cNode;\r\n    });\r\n    successor.forEach((v) => {\r\n      if (v.dist > currentNode.dist + v.weight) {\r\n        v.dist = currentNode.dist + v.weight;\r\n        v.parent = currentNode;\r\n      }\r\n    });\r\n    successor.filter((v) => !(v.visited || queue.includes(v))).forEach((v) => queue.push(v));\r\n  }\r\n\r\n  return [[], ArrayFromVertexSet(visitedNodes, start, goal)];\r\n}\r\n\r\nexport function generateMaze(\r\n  nodes:NodeClass[][],\r\n  nodesInfos:NodeInfo[][],\r\n  current:Coord,\r\n  visited = new Set<string>(),\r\n  toAnimate:Coord[] = [],\r\n) {\r\n  visited.add(coordToString(current));\r\n  toAnimate.push(current);\r\n  const neighbours = getNeighbours(current, nodesInfos, 2);\r\n  neighbours.sort(() => Math.random() - 0.5).forEach((n) => {\r\n    let test = false;\r\n    if (visited.has(coordToString(n))) {\r\n      test = true;\r\n      if (Math.random() > (mazeHolePresence / 100)) return;\r\n    }\r\n    const midCoord:Coord = { x: (n.x + current.x) / 2, y: (n.y + current.y) / 2 };\r\n    toAnimate.push(midCoord);\r\n    if (!test) generateMaze(nodes, nodesInfos, n, visited, toAnimate);\r\n  });\r\n  return toAnimate;\r\n}\r\n","/* eslint-disable no-underscore-dangle */\r\n/* eslint-disable no-param-reassign */\r\nimport {\r\n  AlgosLabels,\r\n  AnimDelay,\r\n  clearBoard,\r\n  Coord,\r\n  createNodeGrid,\r\n  defaultAlgo,\r\n  defaultSpeed,\r\n  defaultWeight,\r\n  ManhattanDist,\r\n  removeWallsAndWeights,\r\n  speedLabels,\r\n  stateToChange,\r\n} from \"./common\";\r\nimport NodeClass from \"./NodeClass\";\r\nimport { Astar, generateMaze } from \"./pathfindingAlgo\";\r\n\r\nexport default class BoardClass {\r\n  protected board:NodeClass[][];\r\n\r\n  protected start:Coord;\r\n\r\n  protected goal:Coord;\r\n\r\n  protected rightClick:boolean;\r\n\r\n  protected mouseDown:boolean;\r\n\r\n  protected toChange:stateToChange;\r\n\r\n  protected currentRenderID: number;\r\n\r\n  protected _autoRefresh:boolean;\r\n\r\n  protected _currentAlgo:AlgosLabels;\r\n\r\n  protected _speed:speedLabels;\r\n\r\n  constructor(nbRow:number, nbCol:number, defaultStart:Coord, defaultGoal:Coord) {\r\n    this.board = createNodeGrid(nbRow, nbCol);\r\n    this.start = defaultStart;\r\n    this.goal = defaultGoal;\r\n    this.board[this.start.x][this.start.y].state = \"start\";\r\n    this.board[this.goal.x][this.goal.y].state = \"goal\";\r\n    this.rightClick = false;\r\n    this.mouseDown = false;\r\n    this.toChange = \"none\";\r\n    this._autoRefresh = false;\r\n    this._currentAlgo = defaultAlgo;\r\n    this._speed = defaultSpeed;\r\n    this.currentRenderID = Math.random();\r\n  }\r\n\r\n  set speed(speed:speedLabels) {\r\n    this._speed = speed;\r\n  }\r\n\r\n  set currentAlgo(newCurrentAlgo:AlgosLabels) {\r\n    this._currentAlgo = newCurrentAlgo;\r\n  }\r\n\r\n  set autoRefresh(autoRefresh:boolean) {\r\n    this._autoRefresh = autoRefresh;\r\n  }\r\n\r\n  get grid() {\r\n    return this.board;\r\n  }\r\n\r\n  clear() {\r\n    clearBoard(this.board);\r\n    this.currentRenderID = Math.random();\r\n    return this.currentRenderID;\r\n  }\r\n\r\n  reset() {\r\n    const newId = this.clear();\r\n    removeWallsAndWeights(this.board);\r\n    return newId;\r\n  }\r\n\r\n  launch(animation:boolean) {\r\n    const renderID = this.clear();\r\n    const nodesInfos = this.board.map((row) => row.map((n) => n.nodeInfo));\r\n    const [path, toAnimate] = (() => {\r\n      if (this._currentAlgo === \"Astar\") {\r\n        return Astar(nodesInfos, this.start, this.goal, ManhattanDist);\r\n      }\r\n      return Astar(nodesInfos, this.start, this.goal);\r\n    })();\r\n    if (path.length === 0) console.log(\"no Path\");\r\n    const len = toAnimate.length;\r\n    this.animateNodes(\r\n      toAnimate,\r\n      (node:NodeClass) => { node.state = \"visited\"; },\r\n      renderID,\r\n      animation,\r\n    );\r\n    this.animateNodes(\r\n      path,\r\n      (node:NodeClass) => { node.state = \"path\"; },\r\n      renderID,\r\n      animation,\r\n      len,\r\n    );\r\n  }\r\n\r\n  handleMouseEnter(node:NodeClass) {\r\n    if (!this.mouseDown) return;\r\n    switch (this.toChange) {\r\n      case \"setWall\":\r\n        if (node.state === \"empty\") node.state = \"wall\";\r\n        break;\r\n      case \"removeWall\":\r\n        if (node.state === \"wall\") node.state = \"empty\";\r\n        break;\r\n      case \"start\":\r\n        if (node.state === \"empty\") {\r\n          this.board[this.start.x][this.start.y].state = \"empty\";\r\n          node.state = \"start\";\r\n          this.start = node.pos;\r\n        }\r\n        break;\r\n      case \"goal\":\r\n        if (node.state === \"empty\") {\r\n          this.board[this.goal.x][this.goal.y].state = \"empty\";\r\n          node.state = \"goal\";\r\n          this.goal = node.pos;\r\n        }\r\n        break;\r\n      case \"setWeight\":\r\n        if (node.state === \"empty\" && !node.weight) {\r\n          node.weight = defaultWeight;\r\n        }\r\n        break;\r\n      case \"removeWeight\":\r\n        if (node.weight) {\r\n          node.weight = undefined;\r\n        }\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    if (this._autoRefresh && this.mouseDown) this.launch(false);\r\n    this.mouseDown = false;\r\n  }\r\n\r\n  handleMouseDown = (node:NodeClass, button:number) => {\r\n    switch (button) {\r\n      case 0:\r\n        this.rightClick = false;\r\n        break;\r\n      case 2:\r\n        this.rightClick = true;\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n    this.clear();\r\n    switch (node.state) {\r\n      case \"empty\":\r\n        // eslint-disable-next-line no-nested-ternary\r\n        this.toChange = this.rightClick ? node.weight ? \"removeWeight\" : \"setWeight\" : \"setWall\";\r\n        break;\r\n      case \"wall\":\r\n        this.toChange = this.rightClick ? \"none\" : \"removeWall\";\r\n        break;\r\n      case \"start\":\r\n        this.toChange = this.rightClick ? \"none\" : \"start\";\r\n        break;\r\n      case \"goal\":\r\n        this.toChange = this.rightClick ? \"none\" : \"goal\";\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n    this.mouseDown = true;\r\n    this.handleMouseEnter(node);\r\n  }\r\n\r\n  generateMaze() {\r\n    const renderID = this.reset();\r\n    this.board.forEach((row) => {\r\n      row.forEach((node) => {\r\n        if (node.state === \"empty\") node.state = \"wall\";\r\n      });\r\n    });\r\n    const startingPoint:Coord = {\r\n      x: this.start.x + ((this.start.x + 1) % 2),\r\n      y: this.start.y + ((this.start.y + 1) % 2),\r\n    };\r\n    const nodesInfos = this.board.map((row) => row.map((n) => n.nodeInfo));\r\n    const toAnimate = generateMaze(this.board, nodesInfos, startingPoint);\r\n    this.animateNodes(\r\n      toAnimate,\r\n      (node:NodeClass) => { if (node.state === \"wall\") node.state = \"empty\"; },\r\n      renderID,\r\n    );\r\n  }\r\n\r\n  private animateNodes(\r\n    toAnimate:Coord[],\r\n    changeState: (node:NodeClass) => void,\r\n    renderID:number,\r\n    animate = true,\r\n    offset = 0,\r\n  ) {\r\n    const toDo = animate && AnimDelay[this._speed] !== 0\r\n      ? (pos:Coord, i:number) => setTimeout(\r\n        () => { if (renderID === this.currentRenderID) changeState(this.board[pos.x][pos.y]); },\r\n        (offset + i) * AnimDelay[this._speed],\r\n      ) : (pos:Coord) => { changeState(this.board[pos.x][pos.y]); };\r\n    toAnimate.forEach(toDo);\r\n  }\r\n}\r\n","// eslint-disable-next-line no-use-before-define\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { NodeState } from \"../common\";\r\nimport NodeClass from \"../NodeClass\";\r\n\r\ninterface NodeProps {\r\n  node:NodeClass;\r\n  handleMouseDown:(node:NodeClass, button:number) => void;\r\n  handleMouseEnter:(node:NodeClass) => void;\r\n}\r\n\r\nexport default function Node({ node, handleMouseDown, handleMouseEnter }:NodeProps) {\r\n  const [classNames, setClassNames] = useState<string>(\"node\");\r\n  const changeStateHandler = (newState:NodeState, weight?:number) => {\r\n    const newClassNames = [\"node\"];\r\n    if (newState !== \"empty\") newClassNames.push(`node-${node.state}`);\r\n    if (weight) newClassNames.push(\"node-weight\");\r\n    setClassNames(newClassNames.join(\" \"));\r\n  };\r\n  useEffect(() => {\r\n    // eslint-disable-next-line no-param-reassign\r\n    node.stateChangeHandler = changeStateHandler;\r\n    changeStateHandler(node.state);\r\n  }, [node]);\r\n  return (\r\n    <div\r\n      className={classNames}\r\n      onMouseDown={(e) => handleMouseDown(node, e.button)}\r\n      onMouseEnter={() => handleMouseEnter(node)}\r\n    >\r\n      <div>\r\n        {/* these are the start/end/weight icons */ }\r\n        {/* wich will be render or not by the css based on the class */}\r\n        <i className=\"far fa-dot-circle igoal\" />\r\n        <i className=\"far fa-compass istart\" />\r\n        <i className=\"fas fa-weight-hanging iweight\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// eslint-disable-next-line no-use-before-define\r\nimport React from \"react\";\r\nimport { coordToString } from \"../common\";\r\nimport NodeClass from \"../NodeClass\";\r\nimport Node from \"./node\";\r\n\r\ninterface GridProps {\r\n  nodeGrid:NodeClass[][];\r\n  handleMouseDown:(node:NodeClass, button:number) => void;\r\n  handleMouseEnter:(node:NodeClass) => void;\r\n}\r\n\r\nexport default function Grid({\r\n  nodeGrid,\r\n  handleMouseDown,\r\n  handleMouseEnter,\r\n}:GridProps) {\r\n  return (\r\n    <div id=\"grid\" className=\"noselect\" onContextMenu={(e) => e.preventDefault()}>\r\n      {nodeGrid.map((row) => row.map((node) => (\r\n        <Node\r\n          key={coordToString(node.pos)}\r\n          node={node}\r\n          handleMouseDown={handleMouseDown}\r\n          handleMouseEnter={handleMouseEnter}\r\n        />\r\n      )))}\r\n    </div>\r\n  );\r\n}\r\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable no-param-reassign */\n// eslint-disable-next-line no-use-before-define\nimport React, { useEffect } from \"react\";\nimport DropDownList from \"./components/dropDownList\";\nimport \"./css/main.css\";\n\nimport {\n  AlgosChoices,\n  AlgosLabels,\n  COL_NUMBER,\n  defaultAlgo,\n  defaultGoal,\n  defaultSpeed,\n  defaultStart,\n  defaultWeight,\n  ROW_NUMBER,\n  SpeedChoices,\n  speedLabels,\n} from \"./common\";\nimport BoardClass from \"./BoardClass\";\nimport Grid from \"./components/grid\";\n\nexport default function App() {\n  const Board = new BoardClass(ROW_NUMBER, COL_NUMBER, defaultStart, defaultGoal);\n\n  const handleAlgoChange = (algo:AlgosLabels) => {\n    Board.currentAlgo = algo;\n  };\n\n  const visualizeButtonHandler = () => {\n    Board.launch(true);\n  };\n\n  const reset = () => {\n    Board.reset();\n  };\n\n  const clear = () => {\n    Board.clear();\n  };\n\n  const handleSpeedChange = (speed:speedLabels) => {\n    Board.speed = speed;\n  };\n\n  const handleMazeGeneration = () => {\n    Board.generateMaze();\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"mouseup\", () => Board.handleMouseUp());\n  }, []);\n\n  return (\n    <div className=\"main\">\n      <nav className=\"nav-bar\">\n        <div className=\"title\">\n          <p>PathFinder</p>\n        </div>\n        <div className=\"options-bar noselect\">\n          <DropDownList<AlgosLabels>\n            handleChange={handleAlgoChange}\n            choices={AlgosChoices}\n            id=\"algo-list\"\n            defaultChoice={defaultAlgo}\n            question=\"Algorithm :\"\n          />\n          <div className=\"button\" onClick={visualizeButtonHandler}>\n            Visualize\n          </div>\n          <div className=\"button\" onClick={clear}>\n            Clear Path\n          </div>\n          <div className=\"button\" onClick={reset}>\n            Clear Walls & Weights\n          </div>\n\n          <DropDownList\n            handleChange={(newChoice) => { Board.autoRefresh = newChoice === \"YES\"; }}\n            choices={[\"YES\", \"NO\"]}\n            id=\"refresh-list\"\n            defaultChoice=\"NO\"\n            question=\"Auto Refresh :\"\n          />\n          <DropDownList\n            handleChange={handleSpeedChange}\n            choices={SpeedChoices}\n            id=\"speed-list\"\n            defaultChoice={defaultSpeed}\n            question=\"Speed :\"\n          />\n          <div className=\"button\" onClick={handleMazeGeneration}>\n            Generate Maze\n          </div>\n        </div>\n      </nav>\n      <div id=\"exemple\">\n        <div className=\"exemple-container\">\n          <p>Unvisited/Blank Node :</p>\n          <div className=\"node exemple\" />\n        </div>\n        <div className=\"exemple-container\">\n          <p>Wall Node :</p>\n          <div className=\"node exemple node-wall\" />\n        </div>\n\n        <div className=\"exemple-container\">\n          <p>Visited Node :</p>\n          <div className=\"node exemple node-visited\" />\n        </div>\n        <div className=\"exemple-container\">\n          <p>Path Node :</p>\n          <div className=\"node exemple node-path\" />\n        </div>\n        <div className=\"exemple-container\">\n          <p>\n            Weighted Node (cost\n            {` ${defaultWeight} `}\n            to cross) :\n          </p>\n          <div className=\"node exemple node-weight\">\n            <div>\n              <i className=\"fas fa-weight-hanging iweight\" />\n            </div>\n          </div>\n        </div>\n      </div>\n      <Grid\n        nodeGrid={Board.grid}\n        handleMouseDown={(node, button) => { Board.handleMouseDown(node, button); }}\n        handleMouseEnter={(node) => { Board.handleMouseEnter(node); }}\n      />\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}